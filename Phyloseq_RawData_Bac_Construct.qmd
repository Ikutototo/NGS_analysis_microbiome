---
title: "Phyloseq_RawData_Bacteria_PhyloseqObjectsConstructs"
author: "saito ikuto"
date: now
date-format: "YYYY/MM/DD, HH:mm"
format: 
 html:
    grid: 
      body-width: 1600px
    code-fold: FALSE
    toc: true
    toc-expand: true
    toc-location: right
    toc-depth: 3
    number-sections: true
    embed-resources: false
    highlight-style: atom-one
    theme: yeti
    css: style.css
 pdf:
    toc: true
    number-sections: true
    colorlinks: true
    documentclass: scrartcl
    papersize: letter
---

# Reference & Memo

::: callout-tip
## Reference HP

【Quarto HP】

[Shortcuts & Options](https://quarto.org/docs/visual-editor/options.html)

[Guide](https://quarto.org/docs/guide/)

⌘/ → Insert Anything

#\| eval: false → 毎回のRenderingでコードチャンクを評価しても、意味ないので、FALSE設定、状況に応じて、FALSEにすること

[Phyloseq HP](https://joey711.github.io/phyloseq/index.html)

[Bioconductor workflow for microbiome data analysis: from raw reads to community analyses](https://f1000research.com/articles/5-1492)

> Previous standard workflows depended on clustering all 16s rRNA sequences (generated by next generation amplicon sequencing) that occur within a 97% radius of similarity and then assigning these to ‘Operational Taxonomic Units’ (OTUs) from reference trees1,2.
>
> These approaches do not make use of all the data, in particular sequence quality scores and statistical information available on the reads were not incorporated into the assignments.
>
> In contrast, the de novo read counts used here will be constructed through the incorporation of both the quality scores and sequence frequen- cies in a probabilistic noise model for nucleotide transitions. For more details on the algorithmic implementation of this step see 3.
:::

ToDoList

-   [ ] 目的は、農薬散布に伴い、変化した分類群を探すこと、群衆構造で多様性などを評価すること
-   [ ] Relative abundunce を各分類レベルでグラフ化 \[各sampleでtop10のASVs(各分類レベルで)\]
-   [ ] 前処理の方法を検討

------------------------------------------------------------------------

# Chunk Options & SetDirectory

```{r}
#| label: ChunkOption
#| include: true

knitr::opts_chunk$set(echo = TRUE)
# MacBookAir or ProでPATH(My drive or マイドライブ)が異なるため注意が必要
knitr::opts_knit$set(
    root.dir = "/Users/ikutosaito/Library/CloudStorage/GoogleDrive-saito2022@patholab-meiji.jp/My Drive/芝草/NGS_consignment/Novogene/Data/250331")

```

# PackageList & Load RData

[**PhyloseqData.RDataにMetaData, PhyseqData(PhylogenicTreeあり), trackのオブジェクトを保存済**]{.mark-red}

```{r}
#| message: false 
#| label: PackageList & SessionInfo

# 個別で使用するPackageを読み込んだほうが良い
# lib <- c("dada2", "ggplot2", "Biostrings", "phyloseq", "ShortRead", "crayon",
#          "dplyr", "DESeq2", "apeglm", "pheatmap", "RColorBrewer")
# for (i in lib) {
#   print(i)
#   library(i, quietly = TRUE, verbose = FALSE, warn.conflicts = FALSE, character.only = TRUE)
# }



# DADA2_??.Rで実装し、保存したRDataをload
# MacBookAir or ProでPATH(My drive or マイドライブ)が異なるため注意が必要
load("~/Library/CloudStorage/GoogleDrive-saito2022@patholab-meiji.jp/My Drive/芝草/NGS_consignment/Novogene/Data/250331/RData/SaveObjects/PhyloseqData.RData")


```

::: callout-warning
## Novogene 16s amplicom sequence

[**Novogene 委託 16s amplicom seqence → データ解析× の場合、配列のQC + Filtering + Mergeまでは実装してくれるが、属・種のAnnotationから自力で実装する必要がある**]{.underline}

![Bioinformatics Analysis Pipeline](Phyloseq_RawData_Bac_images/NovogeneBioinformatics_Analysis_Pipeline.png){width="1024"}
:::

# ConstructMetaData

```{r}
#| label: ConstructMetaData
#| eval: false
#| Include: false


# MacBookAir or ProでPATH(My drive or マイドライブ)が異なるため注意が必要
# SampleMetaDataをExcelで作成 → FileFormatをCSV UTF-8(csv)を選択して、.csvで保存
MetaData <- read.csv("~/Library/CloudStorage/GoogleDrive-saito2022@patholab-meiji.jp/My Drive/芝草/NGS_consignment/Novogene/Data/NGS_Analysis/SampleMetaData_Bacteria.csv",
                     header = TRUE, sep = ",", fileEncoding = "UTF-8")
MetaData$dps <- factor(MetaData$dps, levels = c(0, 3, 7)) # dps列の因子型変換


# rownamesをMetaData seqtab.nochimで合わせる
rownames(seqtab.nochim)
rownames(MetaData) <- rownames(seqtab.nochim)

# rownamesが一致しているか確認
sample_names(otu_table(seqtab.nochim, taxa_are_rows = FALSE))
sample_names(sample_data(MetaData))

cat("Class: ", class(MetaData), "\n")
str(MetaData)
cat("Type: ", typeof(MetaData), "\n")

cat("Class: ", class(seqtab.nochim), "\n")
str(seqtab.nochim)
cat("Type: ", typeof(seqtab.nochim), "\n")

```

# Construct the phylogenetic tree:

::: callout-note
## Note:

Phylogenetic relatedness is commonly used to inform downstream analyses, especially the calculation of phylogeny-aware distances between microbial communities.

The DADA2 sequence inference method is reference-free, so we must construct the phylogenetic tree relating the inferred sequence variants de novo.

We begin by performing a multiple-alignment of the inferred sequences.
:::

```{r}
#| label: Construct the phylogenetic tree
#| eval: false
#| Include: false

# eval: falseにしておくこと

library("dada2")
library("msa")
library("phangorn")
library("crayon")

seqs <- getSequences(seqtab.nochim)
names(seqs) <- seqs 



# M4/M1 Macbookpro/Air system.time(second) → 所要時間(1日かかる)
# user          system  elapsed 
# 26200/43446   29/36   26228/43489 
system.time(mult <- msa(seqs, method="ClustalW", type="dna", order="input"))

phang.align <- as.phyDat(mult, type="DNA", names=getSequence(seqtab.nochim))



# M4/M1 Macbookpro/Air system.time(second) → 所要時間
# user      system  elapsed 
# 427/587   12/25   441/614
system.time(dm <- dist.ml(phang.align))



# M4/M1 Macbookpro/Air system.time(second) → 所要時間
# user      system      elapsed 
# 593/943   0.867/1.5   593/944
system.time(treeNJ <- NJ(dm)) # Note, tip order != sequence order


system.time(fit <- pml(treeNJ, data = phang.align))

## negative edges length changed to 0!
system.time(fitGTR <- update(fit, k=4, inv=0.2))


# M4/M1 Macbookpro/Air system.time(second) → 所要時間(2~3日かかる)
# シングルスレッドのため時間がすごくかかる
# 133768    3126    136868(38 hour)
system.time(fitGTR <- optim.pml(fitGTR, model="GTR", optInv=TRUE, optGamma=TRUE,
                    rearrangement = "stochastic", control = pml.control(trace = 0)))

# 一つ前のCodeが終わったことを知らせる
cat(crayon::bgGreen("Processing of plotqualityprofile is complete."))

# Paackageのdetach
detach("package:phangorn", unload=TRUE)
detach("package:dada2", unload=TRUE)
detach("package:msa", unload=TRUE)
detach("package:crayon", unload=TRUE)


# save(mult,phang.align,dm,treeNJ,fitGTR
#      file = "~/Library/CloudStorage/GoogleDrive-saito2022@patholab-meiji.jp/My Drive/芝草/NGS_consignment/Novogene/Data/250331/RData/phylogenetic.RData")


```

# ConstructPhyseqObjects

```{r}
#| label: ConstructPhyseqObjects
#| eval: false
#| Include: false

# load("~/Library/CloudStorage/GoogleDrive-saito2022@patholab-meiji.jp/My Drive/芝草/NGS_consignment/Novogene/Data/250331/RData/PlotQC/TaxaData.RData")
# load("~/Library/CloudStorage/GoogleDrive-saito2022@patholab-meiji.jp/My Drive/芝草/NGS_consignment/Novogene/Data/250331/RData/PlotQC/MergeData.RData")
# load("~/Library/CloudStorage/GoogleDrive-saito2022@patholab-meiji.jp/My Drive/芝草/NGS_consignment/Novogene/Data/250331/RData/fitGTR_done.RData")



# MetaData <- read.csv("~/Library/CloudStorage/GoogleDrive-saito2022@patholab-meiji.jp/My Drive/芝草/NGS_consignment/Novogene/Data/NGS_Analysis/SampleMetaData_Bacteria.csv",
#                      header = TRUE, sep = ",", fileEncoding = "UTF-8")
# MetaData$dps <- factor(MetaData$dps, levels = c(0, 3, 7)) 



library(phyloseq)
PhyseqData <- phyloseq(otu_table(seqtab.nochim, taxa_are_rows=FALSE), 
                       sample_data(MetaData),
                       tax_table(taxa),
                       phy_tree(fitGTR$tree))



dna <- Biostrings::DNAStringSet(taxa_names(PhyseqData))
names(dna) <- taxa_names(PhyseqData)
PhyseqData <- merge_phyloseq(PhyseqData, dna)

# 配列データの行名をASV??に変更
taxa_names(PhyseqData) <- paste0("ASV", seq(ntaxa(PhyseqData)))



cat("Class: ", class(PhyseqData), "\n")
str(PhyseqData)
cat("Type: ", typeof(PhyseqData), "\n")

cat("Class: ", class(dna), "\n")
str(dna)
cat("Type: ", typeof(dna), "\n")



# save(MetaData, PhyseqData, track,
#      file = "~/Library/CloudStorage/GoogleDrive-saito2022@patholab-meiji.jp/My Drive/芝草/NGS_consignment/Novogene/Data/250331/RData/SaveObjects/PhyloseqData.RData")

# phyloseqObjectsが構築できているのかcheck
# plot_richness(PhyseqData, x = "dps", measures = c("Shannon", "Simpson"))

# cat(crayon::bgGreen("Processing of plotqualityprofile is complete."))
```

::: callout-note
## Constructors:

[Tutorials Data import](https://joey711.github.io/phyloseq/import-data.html)を参照

-   `otu_table` - Works on any numeric `matrix`. You must also specify if the species are rows or columns (行がASVs, 列がsampleの行列を出力)

-   `sample_data` - Works on any `data.frame`. **The rownames must match the sample names in the `otu_table`** if you plan to combine them as a phyloseq-object

-   `tax_table` - Works on any character `matrix`. **The rownames must match the OTU names (`taxa_names`) of the `otu_table`** if you plan to combine it with a phyloseq-object.

-   `phyloseq` - Takes as argument an `otu_table` and any unordered list of valid phyloseq components: `sample_data`, `tax_table`, `phylo`, or `XStringSet`. The tip labels of a phylo-object (tree) must match the OTU names of the `otu_table`, and similarly, the sequence names of an `XStringSet` object must match the OTU names of the `otu_table`.

-   `merge_phyloseq` - Can take any number of phyloseq objects and/or phyloseq components, and attempts to combine them into one larger phyloseq object. This is most-useful for adding separately-imported components to an already-created phyloseq object.

## Functions:

-   `ntaxa` - ASVs総数(PhyloseqObjects)

-   `nsamples` - Sample数(NGS実施した)

-   `sample_names` - sample名の取得

-   `rank_names` - 分類階級

-   `sample_variables` - SampleMetaDataの変数表示

-   `taxa_names` - ASVsの一覧表示

-   `phy_tree` - phytreeObjects(系統樹)の表示

-   `tax_table` -

-   `taxa_are_rows` - ASVsが行にあるなら、TRUE, 列ならFALSE

### **PreProcess methods:**

-   `filterfun_sample` -

-   `filter_taxa` -

### **Subsetting Methods:**

-   `prune_taxa` - 特定のASVs(=taxa)をphyloseqObjectsから取り除いたり、指定したものだけ残すことができる

-   `prune_samples`

-   `subset_taxa` - Family == "???" でサブセット化

-   `subset_samples`

-   `taxa_names` - ASVs IDのみ出力 (ベクトル)　`otu_table()`: 行列で出力

### **Agglomeration Methods:**

-   `tip_glom`

-   `tax_glom`

-   `taxa_sums` - 各ASVsが全eDNASample(Bac1\~9)において、合計の存在量

### **transforming abundance values Methods:**

-   `transform_sample_counts` - It takes as arguments a phyloseq-object and an R function, and returns a phyloseq-object in which the abundance values have been transformed, sample-wise, according to the transformations specified by the function.

-   
:::

# Exports physeqData In csv:

```{r}
#| label: Exports Data .csv
#| eval: false
#| Include: false

# S4クラスであり、$ではなく、@(スロット)で指定すること
# 場合によって、t()が必要ない場合もある
ExportPhyseqCsvData <- cbind(t(PhyseqData@otu_table@.Data), PhyseqData@tax_table@.Data)

# write.csv(ExportPhyseqCsvData,
#           file = "~/Library/CloudStorage/GoogleDrive-saito2022@patholab-meiji.jp/My Drive/芝草/NGS_consignment/Novogene/Data/NGS_Analysis/physeqData_csv/ExportCSVData.csv", 
#           row.names = TRUE) # 行名にASVをつけるかどうか

```

# SessionInfo

```{r}
#| label: sessionInfo
#| eval: true
#| Include: false

PhyseqData
sessionInfo()

```
